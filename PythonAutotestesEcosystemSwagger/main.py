from fastapi import FastAPI, Form, HTTPException, status, Depends
from pydantic import BaseModel
from typing import Optional, Dict
import logging
import uuid
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app = FastAPI(
    title="üîê Ai ecosystem test API",
    description="<h3><strong>API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π</strong></h3>"
                "<div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #3498db;'>"
                "<h3 style='color: #2c3e50; margin-top: 0;'>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h3>"
                "<ul style='color: #7f8c8d;'>"
                "<strong><li>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (Auth)</li></strong>"
                "<li>–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É</li>"
                "<li>–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã</li>"
                "<li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏</li><br>"
                "<strong><li>–ß–∞—Ç (Chat)</li></strong>"
                "<li>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI-—á–∞—Ç</li>"
                "<li>–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞</li>"
                "<li>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞</li><br>"
                "<strong><li>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ (Settings)</li></strong>"
                "<li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã AI-–º–æ–¥–µ–ª–∏</li>"
                "<li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Top-P AI-–º–æ–¥–µ–ª–∏</li><br>"
                "<strong><li>–°–∏—Å—Ç–µ–º–Ω—ã–µ (System)</li></strong>"
                "<li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ </li>"
                "<li>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ</li>"
                "</ul>"
                "</div>",
    version="1.0.1"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ –ø–∞–º—è—Ç–∏)
active_sessions: Dict[str, dict] = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class LoginResponse(BaseModel):
    message: str
    redirectUrl: str
    sessionToken: str

class ErrorResponse(BaseModel):
    error: str

class LogoutResponse(BaseModel):
    message: str

class SessionInfoResponse(BaseModel):
    valid: bool
    user_login: str
    expires_at: datetime

class ChatResponse(BaseModel):
    answer: str

class TemperatureResponse(BaseModel):
    value: int

class TopPResponse(BaseModel):
    value: int

class ClearResponse(BaseModel):
    message: str

class CopyResponse(BaseModel):
    message: str

class HealthResponse(BaseModel):
    status: str

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
def get_session(token: str = Form(...)):
    if token not in active_sessions:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid session"
        )
    return active_sessions[token]

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
@app.post(
    "/api/auth/login",
    response_model=LoginResponse,
    tags=["Auth"]
)
async def login(
    login: str = Form(...),
    password: str = Form(...)
):
    if login != "v_shutenko" or password != "8nEThznM":
        raise HTTPException(status_code=401, detail="Invalid credentials")
    
    session_token = str(uuid.uuid4())
    active_sessions[session_token] = {
        "user_login": login,
        "expires_at": datetime.now() + timedelta(hours=1)
    }
    
    return LoginResponse(
        message="Success",
        redirectUrl="/request/model.html",
        sessionToken=session_token
    )

@app.post(
    "/api/auth/logout",
    response_model=LogoutResponse,
    tags=["Auth"]
)
async def logout(session_token: str = Form(...)):
    if session_token in active_sessions:
        del active_sessions[session_token]
    return LogoutResponse(message="Logged out")

@app.post(
    "/api/auth/check-session",
    response_model=SessionInfoResponse,
    tags=["Auth"]
)
async def check_session(session_token: str = Form(...)):
    session = get_session(session_token)
    return SessionInfoResponse(
        valid=True,
        user_login=session["user_login"],
        expires_at=session["expires_at"]
    )

# –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
@app.post(
    "/api/chat/send",
    response_model=ChatResponse,
    tags=["Chat"]
)
async def chat_send(
    message: str = Form(...),
    session_token: str = Form(...)
):
    get_session(session_token)
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    if "–ø—Ä–∏–≤–µ—Ç" in message.lower():
        response = "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    elif "–ø–æ–≥–æ–¥–∞" in message.lower():
        response = "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è"
    elif "–≤—Ä–µ–º—è" in message.lower():
        response = f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}"
    else:
        response = "–ü–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å"
    
    return ChatResponse(answer=response)

@app.post(
    "/api/chat/clear",
    response_model=ClearResponse,
    tags=["Chat"]
)
async def chat_clear(session_token: str = Form(...)):
    get_session(session_token)
    return ClearResponse(message="Chat cleared")

@app.post(
    "/api/chat/copy",
    response_model=CopyResponse,
    tags=["Chat"]
)
async def chat_copy(
    text: str = Form(...),
    session_token: str = Form(...)
):
    get_session(session_token)
    return CopyResponse(message="Text copied")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
@app.post(
    "/api/settings/temperature",
    response_model=TemperatureResponse,
    tags=["Settings"]
)
async def set_temperature(
    value: int = Form(..., ge=0, le=200),
    session_token: str = Form(...)
):
    get_session(session_token)
    return TemperatureResponse(value=value)

@app.post(
    "/api/settings/topp",
    response_model=TopPResponse,
    tags=["Settings"]
)
async def set_topp(
    value: int = Form(..., ge=0, le=100),
    session_token: str = Form(...)
):
    get_session(session_token)
    return TopPResponse(value=value)

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@app.get(
    "/api/health",
    response_model=HealthResponse,
    tags=["System"]
)
async def health_check():
    return HealthResponse(status="OK")

@app.get(
    "/api/info",
    tags=["System"]
)
async def server_info():
    return {
        "name": "AI Service",
        "version": "1.0.0"
    }

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/")
async def root():
    return {"message": "Service API"}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)