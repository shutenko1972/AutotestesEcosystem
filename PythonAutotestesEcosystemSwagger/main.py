from fastapi import FastAPI, Form, HTTPException, status, Depends
from pydantic import BaseModel
from typing import Optional, Dict
import logging
import uuid
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app = FastAPI(
    title="üîê Service API",
    description="<h3><strong>API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π</strong></h3><br><br>"
                "<div style='background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #3498db;'>"
                "<h3 style='color: #2c3e50; margin-top: 0;'>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h3>"
                "<ul style='color: #7f8c8d;'>"
                "<li>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>"
                "<li>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã</li>"
                "<li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π</li>"
                "</ul>"
                "</div>",
    version="1.0.0"
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ –ø–∞–º—è—Ç–∏)
active_sessions: Dict[str, dict] = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class LoginRequest(BaseModel):
    login: str
    password: str

class LoginResponse(BaseModel):
    message: str
    redirectUrl: str
    sessionToken: str

class ErrorResponse(BaseModel):
    error: str

class LogoutResponse(BaseModel):
    message: str

class SessionInfoResponse(BaseModel):
    valid: bool
    user_login: str
    expires_at: datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
def get_session(token: str = Form(...)):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
    if token not in active_sessions:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞"
        )
    return active_sessions[token]

# –í–°–ï —Ç—Ä–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ: Authentication
@app.post(
    "/api/auth/login",
    response_model=LoginResponse,
    responses={
        400: {"model": ErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"},
        401: {"model": ErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
        500: {"model": ErrorResponse, "description": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    },
    summary="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 1 —á–∞—Å",
    tags=["Authentication"]
)
async def login(
    login: str = Form(..., description="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", example="v_shutenko"),
    password: str = Form(..., description="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", example="8nEThznM")
):
    try:
        logger.info(f"Login attempt for user: {login}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not login or not password:
            logger.warning("Validation failed: Login and password are required")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if login != "v_shutenko" or password != "8nEThznM":
            logger.warning(f"Invalid credentials for user: {login}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_token = str(uuid.uuid4())
        active_sessions[session_token] = {
            "user_login": login,
            "created_at": datetime.now(),
            "expires_at": datetime.now() + timedelta(hours=1)
        }

        logger.info(f"User {login} authenticated successfully. Session created.")

        return LoginResponse(
            message="–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            redirectUrl="https://ai-ecosystem-test.janusww.com:9999/request/model.html",
            sessionToken=session_token
        )

    except HTTPException:
        raise
    except Exception as ex:
        logger.error(f"Error during login for user: {login} - {ex}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@app.post(
    "/api/auth/logout",
    response_model=LogoutResponse,
    responses={
        401: {"model": ErrorResponse, "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è"},
        500: {"model": ErrorResponse, "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}
    },
    summary="–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
    description="–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π",
    tags=["Authentication"]
)
async def logout(session_token: str = Form(..., description="–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞", example="uuid-—Ç–æ–∫–µ–Ω")):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if session_token not in active_sessions:
            logger.warning("Logout attempt with invalid session token")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )

        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        user_login = active_sessions[session_token]["user_login"]
        del active_sessions[session_token]
        
        logger.info(f"User {user_login} logged out successfully")
        return LogoutResponse(message="–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        
    except HTTPException:
        raise
    except Exception as ex:
        logger.error(f"Error during logout - {ex}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        )

@app.post(
    "/api/auth/check-session",
    response_model=SessionInfoResponse,
    responses={
        401: {"model": ErrorResponse, "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è"},
        500: {"model": ErrorResponse, "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏"}
    },
    summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π",
    tags=["Authentication"]
)
async def check_session(session_token: str = Form(..., description="–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", example="uuid-—Ç–æ–∫–µ–Ω")):
    try:
        if session_token not in active_sessions:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
            )
        
        session = active_sessions[session_token]
        return SessionInfoResponse(
            valid=True,
            user_login=session["user_login"],
            expires_at=session["expires_at"]
        )
    except HTTPException:
        raise
    except Exception as ex:
        logger.error(f"Error during session check - {ex}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏"
        )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
@app.get("/", include_in_schema=False)
async def root():
    return {
       "message": "Service API",
       "version": "1.0.0",
       "docs": "/docs",
       "endpoints": {
            "login": "/api/auth/login",
            "logout": "/api/auth/logout", 
            "check_session": "/api/auth/check-session"
       }
    }

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)